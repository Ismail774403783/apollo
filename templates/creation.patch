--- creation.py	2013-03-15 02:14:01.000000000 +0100
+++ new.creation.py	2013-03-15 02:08:00.000000000 +0100
@@ -1,4 +1,5 @@
 from django.conf import settings
+from django.core.exceptions import ImproperlyConfigured
 from django.db.backends.postgresql_psycopg2.creation import DatabaseCreation
 
 class PostGISCreation(DatabaseCreation):
@@ -38,12 +39,20 @@
                                   style.SQL_FIELD(qn(f.column)) +
                                   style.SQL_KEYWORD(' SET NOT NULL') + ';')
 
-
             if f.spatial_index:
                 # Spatial indexes created the same way for both Geometry and
-                # Geography columns
+                # Geography columns.
+                # PostGIS 2.0 does not support GIST_GEOMETRY_OPS. So, on 1.5
+                # we use GIST_GEOMETRY_OPS, on 2.0 we use either "nd" ops
+                # which are fast on multidimensional cases, or just plain
+                # gist index for the 2d case.
                 if f.geography:
                     index_opts = ''
+                elif self.connection.ops.spatial_version >= (2, 0):
+                    if f.dim > 2:
+                        index_opts = ' ' + style.SQL_KEYWORD('gist_geometry_ops_nd')
+                    else:
+                        index_opts = ''
                 else:
                     index_opts = ' ' + style.SQL_KEYWORD(self.geom_index_opts)
                 output.append(style.SQL_KEYWORD('CREATE INDEX ') +
@@ -56,5 +65,15 @@
         return output
 
     def sql_table_creation_suffix(self):
-        qn = self.connection.ops.quote_name
-        return ' TEMPLATE %s' % qn(getattr(settings, 'POSTGIS_TEMPLATE', 'template_postgis'))
+        cursor = self.connection.cursor()
+        cursor.execute('SELECT datname FROM pg_database;')
+        db_names = [row[0] for row in cursor.fetchall()]
+        postgis_template = getattr(settings, 'POSTGIS_TEMPLATE', 'template_postgis')
+
+        if postgis_template in db_names:
+            qn = self.connection.ops.quote_name
+            return ' TEMPLATE %s' % qn(postgis_template)
+        elif self.connection.ops.spatial_version < (2, 0):
+            raise ImproperlyConfigured("Template database '%s' does not exist." % postgis_template)
+        else:
+            return ''
