from core.documents import Event, Form
from core.forms import BaseQuestionnaireForm
from django import forms


def retrieve_form(deployment, prefix, form_type='CHECKLIST'):
    '''
    Retrieves a matching form for the given deployment, prefix and form_type.

    :param:`deployment` - The deployment document
    :param:`prefix` - The form prefix
    :param:`form_type` - (optional) the form type in narrowing the result
    :returns: a Form document or None
    '''
    events_in_deployment = Event.objects.filter(
        deployment=deployment)

    # find the first form that matches the prefix and optionally form type
    # for the events in the deployment.
    if form_type == 'INCIDENT':
        form = Form.objects.filter(
            events__in=events_in_deployment, prefix__iexact=prefix,
            form_type=form_type).first()
    else:
        form = Form.objects.filter(
            events__in=events_in_deployment, prefix__iexact=prefix).first()

    return form


def build_questionnaire(form):
    '''
    Builds a :class:`core.forms.BaseQuestionnaireForm` subclass with
    autogenerated fields as specified in the form document.

    :param:`form` - Form document that the questionnaire form will be
    built from.
    :returns: a class of type QuesationnaireForm
    '''
    form_fields = {}
    form_groups = []

    if form:
        for group in form.groups:
            form_group = (group.name, {'fields': [], 'legend': group.name})
            for field in group.fields:
                if field.options:
                    if field.allows_multiple_values:
                        form_fields[field.name] = forms.MultipleChoiceField(
                            choices=field.options.items(), required=False,
                            help_text=field.description, label=field.name)
                    else:
                        form_fields[field.name] = forms.ChoiceField(
                            choices=field.options.items(), required=False,
                            help_text=field.description, label=field.name)
                else:
                    if form.form_type == u'CHECKLIST':
                        form_fields[field.name] = forms.IntegerField(
                            max_value=field.max_value or 9999,
                            min_value=field.min_value or 0, required=False,
                            help_text=field.description, label=field.name)
                    else:
                        form_fields[field.name] = forms.BooleanField(
                            required=False, help_text=field.description,
                            label=field.name, widget=forms.CheckboxInput())

                form_group[1]['fields'].append(field.name)
            form_groups.append(form_group)

    metaclass = type('Meta', (), {'fieldsets': form_groups})
    form_fields['Meta'] = metaclass

    return type('QuesationnaireForm', (BaseQuestionnaireForm,), form_fields)
